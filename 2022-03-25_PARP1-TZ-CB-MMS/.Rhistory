))
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
ggplot(table, aes(x=ordered,y=NucAvg2)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg2),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg2),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
ggplot(table, aes(x=condition,y=NucAvg1)) +
geom_violin()
hist(table$NucAvg1, breaks=1000)
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
table <- read.csv("ExperimentCellData.csv")
hist(table$NucArea, breaks=1000)
table <- table[table$NucArea <= 300, ]
hist(table$NucAvg1, breaks=1000)
table <- table[table$NucAvg1 <= 500, ]
hist(table$NucAvg1, breaks=1000)
ggplot(table, aes(x=condition,y=NucAvg1)) +
geom_violin()
ggplot(table, aes(x=condition,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
table$ordered <-
factor(table$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"cntl",
"MMS",
"MMS+CB",
"MMS+TZ",
"CB+TZ",
"MMS+CB+TZ"
))
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
ggplot(table, aes(x=condition,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = condition, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
ggplot(table, aes(x=condition,y=NucAvg1)) +
geom_violin()
ggplot(table, aes(x=condition,y=NucAvg1)) +
geom_violin()
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
table <- read.csv("ExperimentCellData.csv")
table <- table[table$NucArea <= 300, ]
table <- table[table$NucAvg1 <= 500, ]
ggplot(table, aes(x=condition,y=NucAvg1)) +
geom_violin()
table$ordered <-
factor(table$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"cntl",
"MMS",
"MMS+CB",
"MMS+TZ",
"CB+TZ",
"MMS+CB+TZ"
))
ggplot(table, aes(x=condition,y=NucAvg1)) +
geom_violin()
ggplot(table, aes(x=condition,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = condition, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
ggsave('PARP1-MMS-CB-Talazoparib-unordered_2022-03-30.png')
table$ordered <-
factor(table$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"PARP1_cntl",
"PARP1_MMS",
"PARP1_MMS+CB",
"PARP1_MMS+TZ",
"PARP1_CB+TZ",
"PARP1_MMS+CB+TZ"
))
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
table$ordered <-
factor(table$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"PARP1_cntl",
"PARP1_MMS",
"PARP1_MMS+CB",
"PARP1_MMS+TZ",
"PARP1_CB+TZ",
"PARP1_MMS+CB+TZ"
))
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
ggsave('PARP1-MMS-CB-Talazoparib-ordered_2022-03-30.png')
library(stats)
sink(file="PARP1_t-test_results.txt")
library(stats)
sink(file="PARP1_t-test_results.txt")
pairwise.t.test(table$NucAvg1,table$ordered,p.adjust.method="BH",pool.sd=FALSE)
sink()
stop()
count(table,NucAvg1)
nrow(table)
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
table <- read.csv("ExperimentCellData.csv")
nrow(table)
nrow(table)
x = nrow(table)
x
x = nrow(table$condition='PARP1_cntl')
x = nrow(table$condition=='PARP1_cntl')
table$condition
y = table$condition
table[table$condition == 'PARP1_cntl']
table[table$condition == 'PARP1_cntl',]
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
table <- read.csv("ExperimentCellData.csv")
table <- table[table$NucArea <= 300, ]
table <- table[table$NucAvg1 <= 500, ]
table$ordered <-
factor(table$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"PARP1_cntl",
"PARP1_MMS",
"PARP1_MMS+CB",
"PARP1_MMS+TZ",
"PARP1_CB+TZ",
"PARP1_MMS+CB+TZ"
))
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
library(stats)
sink(file="PARP1_t-test_results.txt")
pairwise.t.test(table$NucAvg1,table$ordered,p.adjust.method="BH",pool.sd=FALSE)
sink()
stop()
#install.packages("readr")
#install.packages("dplyr")
#install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
library(car)
library(lattice)
library(dplyr)
library(forcats)
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
table <- read.csv("T1_ExperimentCellData.csv")
hist(table$NucArea, breaks=1000)
table <- table[table$NucArea <= 300, ]
hist(table$NucAvg1, breaks=1000)
table <- table[table$NucAvg1 <= 500, ]
table$ordered <-
factor(table$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"PARP1_cntl",
"PARP1_MMS",
"PARP1_MMS+CB",
"PARP1_MMS+TZ",
"PARP1_CB+TZ",
"PARP1_MMS+CB+TZ"
))
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
ggsave('PARP1-MMS-CB-Talazoparib-15min_ordered_2022-03-30.png')
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
table <- read.csv("T2_ExperimentCellData.csv")
table <- table[table$NucArea <= 300, ]
table <- table[table$NucAvg1 <= 500, ]
table$ordered <-
factor(table$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"PARP1_cntl",
"PARP1_MMS",
"PARP1_MMS+CB",
"PARP1_MMS+TZ",
"PARP1_CB+TZ",
"PARP1_MMS+CB+TZ"
))
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
ggsave('PARP1-MMS-CB-Talazoparib-1hour_ordered_2022-03-30.png')
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
table <- read.csv("T1_ExperimentCellData.csv")
table <- table[table$NucArea <= 300, ]
table <- table[table$NucAvg1 <= 500, ]
table$ordered <-
factor(table$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"PARP1_cntl",
"PARP1_MMS",
"PARP1_MMS+CB",
"PARP1_MMS+TZ",
"PARP1_CB+TZ",
"PARP1_MMS+CB+TZ"
))
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
library(stats)
sink(file="PARP1_15minute_t-test_results.txt")
pairwise.t.test(table$NucAvg1,table$ordered,p.adjust.method="BH",pool.sd=FALSE)
sink()
stop()
green  <- dplyr::summarise(dplyr::group_by(table,table$ordered),median(NucAvg1))
green
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(data=table %>% group_by(ordered) %>%
summarise(median(NucAvg1)),
aes(label=sprintf("%1.1f", Sepal.Length)),
position=position_nudge(y=-0.1), colour="red", size=3.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(data=table,summarise(median(NucAvg1)),
aes(label=sprintf("%1.1f",NucAvg1)),
position=position_nudge(y=-0.1), colour="red", size=3.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(data=table,summarise(median(table$NucAvg1)),
aes(label=sprintf("%1.1f",table$NucAvg1)),
position=position_nudge(y=-0.1), colour="red", size=3.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(data=table,green,
aes(label=sprintf("%1.1f",table$NucAvg1)),
position=position_nudge(y=-0.1), colour="red", size=3.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(data=table,dplyr::summarise(dplyr::group_by(table,table$ordered),median(NucAvg1))
aes(label=sprintf("%1.1f",green)),
position=position_nudge(y=-0.1), colour="red", size=3.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(data=table %>% group_by(table$ordered) %>%
summarise(table.med=median(table$NucAvg1)),
data=table,dplyr::summarise(dplyr::group_by(table,table$ordered),median(NucAvg1))
aes(label=sprintf("%1.1f",green)),
position=position_nudge(y=-0.1), colour="red", size=3.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(data=table %>% group_by(table$ordered) %>%
summarise(table.med=median(table$NucAvg1)),
aes(label=sprintf("%1.1f",green)),
position=position_nudge(y=-0.1), colour="red", size=3.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(aes(label=green), vjust = 1.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(aes(label=NucAvg1), vjust = 1.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(aes(label=table$green), vjust = 1.5)
)
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(aes(label=table$green)) #, vjust = 1.5)
)
table$fifteen_minutes  <- dplyr::summarise(dplyr::group_by(table,table$ordered),median(NucAvg1))
fifteen_minutes  <- dplyr::summarise(dplyr::group_by(table,table$ordered),median(NucAvg1))
fifteen_minutes
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
table <- read.csv("T2_ExperimentCellData.csv")
table <- table[table$NucArea <= 300, ]
table <- table[table$NucAvg1 <= 500, ]
table$ordered <-
factor(table$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"PARP1_cntl",
"PARP1_MMS",
"PARP1_MMS+CB",
"PARP1_MMS+TZ",
"PARP1_CB+TZ",
"PARP1_MMS+CB+TZ"
))
table <- table %>% filter(!is.na(ordered)) # remove rows that are not in specified levels
sixty_minutes    <- dplyr::summarise(dplyr::group_by(table,table$ordered),median(NucAvg1))
ggplot(table, aes(x=ordered,y=NucAvg1)) +
geom_violin() +
stat_summary(
mapping = aes(x = ordered, y = NucAvg1),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
+
geom_text(aes(label=table$green)) #, vjust = 1.5)
)
fifteen_minutes
sixty_minutes
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
one_hour <- read.csv("T1_ExperimentCellData.csv")
fifteen_min <- read.csv("T2_ExperimentCellData.csv")
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
T1_1hr <- read.csv("T1_ExperimentCellData.csv")
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
T1_1hr <- read.csv("T1_ExperimentCellData.csv")
T2_15min <- read.csv("T2_ExperimentCellData.csv")
# processed raw output file from ImageExpress Pico with Perl script
# to pad zeros of well number (01 instead of 1)
# and maps experiment conditions to wells (rows and column labels)
T1_1hr   <- read.csv("T1_ExperimentCellData.csv")
T2_15min <- read.csv("T2_ExperimentCellData.csv")
T1_1hr$ordered <-
factor(T1_1hr$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"PARP1_cntl",
"PARP1_MMS",
"PARP1_MMS+CB",
"PARP1_MMS+TZ",
"PARP1_CB+TZ",
"PARP1_MMS+CB+TZ"
))
T2_15min$ordered <-
factor(T2_15min$condition,
levels = c( # unique(table$condition) into file.txt and run convert-list.pl on file.txt
"PARP1_cntl",
"PARP1_MMS",
"PARP1_MMS+CB",
"PARP1_MMS+TZ",
"PARP1_CB+TZ",
"PARP1_MMS+CB+TZ"
))
fifteen_minutes  <- dplyr::summarise(dplyr::group_by(T2_15min,T2_15min$ordered),median(NucAvg1))
sixty_minutes    <- dplyr::summarise(dplyr::group_by(T1_1hr,T1_1hr$ordered),median(NucAvg1))
fifteen_min
fifteen_minutes  <- dplyr::summarise(dplyr::group_by(T2_15min,T2_15min$ordered),median(NucAvg1))
sixty_minutes    <- dplyr::summarise(dplyr::group_by(T1_1hr,T1_1hr$ordered),median(NucAvg1))
fifteen_minutes
sixty_minutes
T1_1hr   <- T1_1hr[T1_1hr$NucArea <= 300, ]
T2_15min <- T2_15min[T2_15min$NucArea <= 300, ]
